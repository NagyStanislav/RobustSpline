% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hello.R
\name{ts_predict_location}
\alias{ts_predict_location}
\title{Prediction for thin-plate multivariate location estimation}
\usage{
ts_predict_location(tobs, tobsnew, gamma, delta, r)
}
\arguments{
\item{tobs}{Domain locations for the observed points from which the location 
spline was estimated. Matrix of size \code{p1}-times-\code{d}, one row per 
domain point.}

\item{tobsnew}{Domain locations for the new points where the location 
spline is to be estimated. Matrix of size \code{p2}-times-\code{d}, one 
row per domain point.}

\item{gamma}{Vector \code{gamma} determining the first batch of parameters
of the thin-plate spline. Typically outcome of \code{gamma_hat} from 
functions \link{ts_location} or \link{transform_theta_location}.}

\item{delta}{Vector \code{delta} determining the second batch of parameters
of the thin-plate spline. Typically outcome of \code{delta_hat} from 
functions \link{ts_location} or \link{transform_theta_location}.}

\item{r}{Order of the thin-plate spline, positive integer.}
}
\value{
A numerical vector of thin-plate spline values of length \code{p2}, 
corresponding to the rows of the matrix \code{tobsnew}.
}
\description{
Given the estimated thin-plate location spline from function 
\link{ts_location}, this function predicts the spline function values
at new observation points.
}
\examples{
d = 1   # dimension of the domain
m = 10 # number of points per curve
tobs = matrix(runif(m*d), ncol=d)  # location of obsevation points
n = 500                            # sample size
truemeanf1 = function(x)   # true location function
  cos(4*pi*x[1])
truemean = apply(tobs,1,truemeanf1) # discretized values of the true location
Y = replicate(n, truemean + rnorm(m)) # a matrix of functional data, size m*n

# introduce NAs
obsprob = 0.5 # probability of observing a point
B = matrix(rbinom(n*m,1,obsprob),ncol=n)
for(i in 1:m) for(j in 1:n) if(B[i,j]==0) Y[i,j] = NA

# thin-plate spline fitting
res = ts_location(Y, tobs=tobs, r=2, type="square", method="ridge")

jcv = 3 # cross-validation criterion chosen

plot(rep(tobs,n), c(Y), cex=.2, pch=16, ann=FALSE)
title("True/estimated location function")
points(tobs, truemean, pch=16, col="orange")
fullt = matrix(seq(0,1,length=101),ncol=1)
lines(fullt, apply(fullt,1,truemeanf1), col="orange", lwd=2)
points(tobs, res$beta_hat[,jcv], col=2, pch=16)

# prediction
tobsnew = matrix(seq(0,1,length=501),ncol=1)
preds = ts_predict_location(tobs, tobsnew, res$gamma_hat[,jcv], 
  res$delta_hat[,jcv], r=2)
lines(tobsnew, preds, col=2, lwd=2)
legend("topleft",c("data","true","estimated"),
       pch=16, col=c(1,"orange",2))
}
