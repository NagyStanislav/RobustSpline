% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hello.R
\name{kCV}
\alias{kCV}
\title{k-fold cross-validation for the IRLS procedure}
\usage{
kCV(lambda, Z, Y, H, type, k = 5, vrs = "C")
}
\arguments{
\item{lambda}{A candidate parameter value; non-negative real number.}

\item{Z}{Data matrix of dimension \code{n}-times-\code{p}, where \code{n} is
the number of observations, \code{p} is the dimension.}

\item{Y}{Vector of responses of length \code{n}.}

\item{H}{Penalty matrix of size \code{p}-times-\code{p} that
is used inside the quadratic term for penalizing estimated parameters.}

\item{type}{The type of the loss function used in the minimization problem.
Accepted are \code{type="absolute"} for the absolute loss \code{rho(t)=|t|}; 
\code{type="square"} for the square loss \code{rho(t)=t^2}; 
\code{type="Huber"} for the Huber loss \code{rho(t)=t^2/2} if 
\code{|t|<tuning} and \code{rho(t)=tuning*(|t|-tuning/2)} otherwise; and 
\code{type="logistic"} for the logistic loss 
\code{rho(t)=2*t + 4*log(1+exp(-t))-4*log(2)}.}

\item{k}{Number of folds to consider, positive integer. By default
set to 5.}

\item{vrs}{Version of the algorhitm to be used in function \link{IRLS}; 
either \code{vrs="C"} for the \code{C++} version, or \code{vrs="R"} for the 
\code{R} version. Both should give (nearly) identical results, see 
\link{IRLS}.}
}
\value{
A numerical of medians of squared residuals for each fold of the 
data. A numerical vector of \code{k} non-negative values.
}
\description{
Provides the k-fold version of the cross-validation procedure in
conjunction with the \link{IRLS} function directly as an argument of the
parameter \code{lambda}.
}
\details{
Cross-validation based on the median of squared residuals obtained
in each fold of the data.
}
\examples{
n = 50      # sample size
p = 10      # dimension of predictors
Z = matrix(rnorm(n*p),ncol=p) # design matrix
Y = Z[,1]   # response vector
lambda = 1  # tuning parameter for penalization
H = diag(p) # penalty matrix
type = "absolute" # absolute loss

kCV(lambda,Z,Y,H,type,k=5)
}
