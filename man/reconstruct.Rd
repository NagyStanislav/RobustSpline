% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hello.R
\name{reconstruct}
\alias{reconstruct}
\title{Reconstruct and visualise the slope function beta0 and its estimate}
\usage{
reconstruct(
  ts_prep = NULL,
  theta = NULL,
  lambda = NULL,
  Y = NULL,
  type = NULL,
  p1 = 101,
  betafull = NULL,
  main = NULL
)
}
\arguments{
\item{ts_prep}{Output of the function \link{ts_preprocess}.}

\item{theta}{Estimated coefficients, output of \link{IRLS} or \link{ridge}
after passed through \link{transform_theta}. Either \code{theta} or
\code{lambda} must be provided. If \code{theta} is given, \code{lambda}
is disregarded.}

\item{lambda}{Tuning parameter, a non-negative real number. Either \code{theta} or
\code{lambda} must be provided. If \code{theta} is not given, \link{IRLS}
is fitted with parameter \code{lambda}.}

\item{Y}{Vector of responses of length \code{n}.}

\item{type}{The type of the loss function used in the minimization problem.
Accepted are \code{type="absolute"} for the absolute loss \code{rho(t)=|t|}; 
\code{type="square"} for the square loss \code{rho(t)=t^2}; 
\code{type="Huber"} for the Huber loss \code{rho(t)=t^2/2} if 
\code{|t|<tuning} and \code{rho(t)=tuning*(|t|-tuning/2)} otherwise; and 
\code{type="logistic"} for the logistic loss 
\code{rho(t)=2*t + 4*log(1+exp(-t))-4*log(2)}.}

\item{p1}{Number of equidistant discretization points in the interval [0,1]
in each dimension \code{d} of the domain. The total number of discretization
points at which the estimator of \code{beta0} will be generated is 
\code{p1^d}.}

\item{betafull}{The true function \code{beta0} to be plotted along its
estimator. A \code{d}-dimensional array of the values of the 
regression function \code{beta0} of size \code{p1}-times-...-times-\code{p1}.
Interpretation of values as for the functions of \code{Xfull} in function
\link{generate}. Can be provided directly as the output of \link{generate}.}

\item{main}{Title of the displayed plot.}
}
\value{
A plot with the true and the estimated function \code{beta0}, and
the corresponding output of the function \link{IRLS}.
}
\description{
Based on the thin-splines estimates of \code{beta0} obtained from 
functions \link{IRLS} or \link{ridge}, this function reconstructs the 
complete estimator of the regression function \code{beta0} on its full 
domain. It also visualises the results.
}
\examples{
d = 1       # dimension of domain
n = 50      # sample size
p = 10      # number of observed points in domain
p1 = 101 # size of the complete grid
alpha0 = 3  # intercept
beta0 = function(t) t^2 # regression coefficient function
sd.noiseEps = 0.1 # noise standard deviation
tgrid = seq(0,1,length=p1) # full grid of observation points
basis_fun = function(t,k) return(sin(2*pi*k*t)+t^k)
K = 5 # number of basis functions used in the expansion
bfX = list()
for(k in 1:K) bfX[[k]] = basis_fun(tgrid,k)
bcX = matrix(rnorm(n*K,mean=3,sd=5),ncol=K)  # basis coefficients

# Generate the raw data
gen = generate(alpha0, beta0, n, d, p, bfX, bcX, sd.noiseEps)

# Preprocess the data
X = gen$X; Y = gen$Y; tobs = gen$tobs
m = 2   # order of thin-plate splines
tspr = ts_preprocess(X,tobs,m)

# Reconstruction by specifying regression method
reconstruct(tspr, theta = NULL,lambda = 1e-3,Y,"absolute",
  p1=p1, betafull=gen$betafull, main="L1 regression")
  
# Reconstruction by using theta from previously fitted model
res = IRLS(tspr$Z,Y,1e-3,tspr$H,"absolute")
reconstruct(ts_prep = tspr, theta = transform_theta(res$theta_hat,tspr), 
lambda=NULL, Y = Y, type = "absolute", 
p1 = p1, betafull = gen$betafull)
}
